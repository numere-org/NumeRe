#*  _____    __                            ______        
 * |     \  |  |  __ __   _______   ____  |  __  \  ____ 
 * |  |\  \ |  | |  |  | |       \ / __ \ |   ___/ / __ \
 * |  | \  \|  | |  |  | |  Y Y  | | ___/ |     \  | ___/
 * |__|  \_____| |____/  |__|_|__| \____) |__|\__\ \____)
 * ~ ~ ~ ~  Framework fuer Numerische Rechnungen  ~ ~ ~ ~
 * ======================================================
 * | ++ (c) 2014, E. Haenel et al. +++ GNU GPL v 3.0 ++ |
 * ======================================================
 *
 *******************************************************************************
 * Dieses Script ist freie Software. Sie können es unter den Bedingungen       *
 * der GNU General Public License, wie von der Free Software Foundation        *
 * veröffentlicht, weitergeben und/oder modifizieren, entweder gemäß Version 3 *
 * der Lizenz, oder (nach Ihrer Option) jeder späteren Version.                *
 * Die Veröffentlichung dieses Scripts erfolgt in der Hoffnung, dass es        *
 * Ihnen von Nutzen sein wird, aber OHNE IRGENDEINE GARANTIE, sogar ohne die   *
 * implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN         *
 * BESTIMMTEN ZWECK. Details stehen in der GNU General Public Licence          *
 * Sie sollten ein Exemplar der GNU GPL zusammen mit diesem Script erhalten    *
 * haben. Falls nicht, siehe <http://www.gnu.org/licenses/>.                   *
 *******************************************************************************
 *
 * Dies ist ein Beispielscript fuer NumeRe ab Version v 1.0.0 "Biot"
 * Geschrieben am 2014-04-26
 * Dieses Script kann in NumeRe durch das Kommando 'script -start=samples/sample_4'
 * (oder ausserhalb von NumeRe durch Doppelklicken auf dieses File) aufgerufen werden.
 * In diesem Script werden die Animationsfaehigkeit von Plots, die Darstellung
 * von 3D-Trajektorien, sowie erweiterte Plotfunktionaliaeten demonstriert.
 *
 * Fuer notepad++ existiert eine Syntax-Highlighting (numere_synt_highlight.xml) 
 * fuer NumeRe-Scripte mit der Dateiendung '*.nscr'
 *
 * (Alles, was hinter '##' geschrieben wird, ist ein Kommentar und wird bei der Auswertung
 * ignoriert)
 *#
 
## Alles was zwischen #*...*# steht, ist ein Blockkommentar und wird ebenfalls ignoriert

## Der Parameter "-noquotes" unterdrueckt die Anfuehrungszeichen in der Ausgabe:
"Willkommen bei diesem 4. Beispielscript\n---------------------------------------\n(Arbeiten mit Datensätzen & Analyse)\n" -noquotes

#*
 * Zentral zur Arbeit mit Datensaetzen ist zunaechst einmal die Existenz eines solchen Datensatzes.
 * NumeRe akzeptiert Datensaetze in numerischer Form, deren Spalten mit Leerzeichen oder Tabulatoren
 * getrennt sein muessen. Als Dezimaltrennzeichen kann sowohl ein Punkt "." oder auch ein Komma ","
 * verwendet werden.
 * Die Daten muessen als Klartextdatei vorhanden sein, wobei NumeRe standardmaessig nur Dateien der
 * Endungen *.dat und *.txt laedt.
 * Es wird auch die Verwendung ungueltiger Messwerte unterstuetzt. Hierzu muessen die ungueltigen Werte
 * durch "---" oder "NaN" dargestellt sein.
 *
 * Zunaechst wollen wir einmal nachsehen, wo sich das Datenfile befindet. Es sollte eigentlich eine
 * Datei des Namens "data.dat" im Ordner "<>/samples" geben, wobei "<>" ein Platzhalter fuer das NumeRe-
 * Stammverzeichnis ist. Zeigen wir doch einfach mal alle Dateien in diesem Ordner, die auf "*.dat" enden:
 *#
list -files=<>/samples pattern=*.dat

#*
 * Das Laden der Datensaetze muss zuerst geschehen und wird einfach durch das Kommando "load -data" durch-
 * gefuehrt:
 *#
"Gibt es hier die Datei \"data.dat\"? Dann einfach ENTER druecken, um mit dem Script fortzufahren.\nWenn nicht, einen anderen Dateinamen eingeben:\n" -noquotes
load "<>/samples/??[data]" -ignore

#*
 * Hierbei haben wir die NumeRe-Eingabeauffordungssyntax verwendet: "??". Diese Syntax haelt das Script an
 * und wird nach einer Eingabe fragen. Der Parameter in eckigen Klammern "[data]" weist "data" als Default-
 * Wert aus, der verwendet wird, wenn nichts eingeben wird. Fehlt dieser Wert, wird das Programm erst fort-
 * fahren, wenn ein Wert eingegeben wird.
 * Die Option "ignore" weist NumeRe an, alle Sicherheitsabfragen zu umgehen. Bereits geladene Daten werden
 * mit dieser Option automatisch ueberschrieben!
 * Wir wollen von diesem Datensatz nun eine vollstaendige Statistik haben. Dies erreichen wir einfach,
 * indem wir das Kommando "stats data(:,:)" verwenden und die Tabelle in die Datei "<savepath>/sample_4_stats.dat"
 * speichern. Im  Prinzip ist "<savepath>" nicht noetig, da dieser Pfad automatisch verwendet wird, wenn der
 * Parameter "save" verwendet wird.
 *#
"\nStatistiken berechnen:\n----------------------" -noquotes
stats data(:,:) -export=<savepath>/sample_4_stats

#*
 * Ausserdem moechten wir noch ein Histogramm aller Datenreihen dieses Datensatzes erzeugen.
 * Wir verwenden dazu dazu Kommando "hist data(:,:)". Wir wollen das Histogramm und den Datensatz in den Dateien
 * "<savepath>/sample_4_hist.png" bzw. "sample_4_hist.dat" speichern, das gesamte Intervall in 32 Bins
 * einteilen und ein Histogramm aller Spalten zugleich erzeugen:
 *#
"\nHistogramm berechnen:\n---------------------" -noquotes
hist data(:,:) -export=sample_4_hist bins=32
 
"\nEnde des Beispielscripts\n" -noquotes
