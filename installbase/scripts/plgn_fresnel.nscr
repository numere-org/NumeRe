#*  _____    __                            ______        
 * |     \  |  |  __ __   _______   ____  |  __  \  ____ 
 * |  |\  \ |  | |  |  | |       \ / __ \ |   ___/ / __ \
 * |  | \  \|  | |  |  | |  Y Y  | | ___/ |     \  | ___/
 * |__|  \_____| |____/  |__|_|__| \____) |__|\__\ \____)
 * ~ ~ ~ ~  Framework fuer Numerische Rechnungen  ~ ~ ~ ~
 * ======================================================
 * | ++ (c) 2016, E. Haenel et al. +++ GNU GPL v 3.0 ++ |
 * ======================================================
 *
 *******************************************************************************
 * Dieses Plugin ist freie Software. Sie können es unter den Bedingungen       *
 * der GNU General Public License, wie von der Free Software Foundation        *
 * veröffentlicht, weitergeben und/oder modifizieren, entweder gemäß Version 3 *
 * der Lizenz, oder (nach Ihrer Option) jeder späteren Version.                *
 * Die Veröffentlichung dieses Scripts erfolgt in der Hoffnung, dass es        *
 * Ihnen von Nutzen sein wird, aber OHNE IRGENDEINE GARANTIE, sogar ohne die   *
 * implizite Garantie der MARKTREIFE oder der VERWENDBARKEIT FÜR EINEN         *
 * BESTIMMTEN ZWECK. Details stehen in der GNU General Public Licence          *
 * Sie sollten ein Exemplar der GNU GPL zusammen mit diesem Script erhalten    *
 * haben. Falls nicht, siehe <http://www.gnu.org/licenses/>.                   *
 *******************************************************************************
 *
 * Dieses Script enthält die Installationsroutine für das Fresnelanalys-Plugin,
 * das mittels des Kommandos "install plgn_fresnel" installiert werden kann. Dieses
 * Plugin bietet die Möglichkeit, die Datenreihen der Brewsterwinkel-Messung robust
 * zu fitten.
 *#

#*
 * CHANGELOG:
 * 16-03-15: First release as v0.1.2
 * 16-03-16: 
 *   + Parameterprüfung
 *   + comments
 *   + "$showPlot" ist nun "private"
 *   + Ergebnistabelle zeigt Datei/-Tabellennamen an
 * 16-03-18:
 *   + globale Prozedur zum Extrahieren von Tabellenparametern hinzugefügt
 *   c manuelles Parameterlesen mit globaler Prozedur gelöst
 * 16-03-20:
 *   + globale Prozedur zum Entfernen von führenden und angehängten Leerzeichen hinzugefügt
 *   c Dateinamen im Ergebnis werden nun mit Pfad angezeigt
 *   + Prozedur für eine chi^2-Map hinzugefügt (muss noch integriert werden)
 * 16-03-28:
 *   + chi^2-Map über den Parameter "chimap" eingefügt
 *   + Intervallbereiche der chi^2-Map werden nun auch abgefragt
 *   + Sicherheitsprüfung, dass zumindest der erste Parameter der chi^2-Map auch existiert
 *   c im 1D-Chimap-Fall wird nur ein "plot" aufgerufen, keine "dens"-Map mehr
 * 16-03-30:
 *   + comments
 *   + "chimap" zum Hilfeintrag hinzugefügt
 *   c "chimap()" durch "plgn_fresnel_chimap()" ausgetauscht
 *   + Speicher aufräumen nach chimap
 * 16-03-31:
 *   - unnötige doppelte Namespaces entfernt
 * 16-04-01:
 *   c Fehlermeldungen aktualisiert und erweitert.
 * 16-04-07:
 *   c Spaltenplausibilitätsprüfung verschoben.
 *   + Plotparam-Reset zur chimap-Funktion hinzugefügt
 * 16-04-08:
 *   + chi^2-Map-Ergebnisse tragen nun den Titel "\chi^2".
 *   + Im Plot der Fitanalyse wird der angepasste Brechungsindex in der Legende für die Fitfunktion angezeigt.
 * 16-05-23: release als v0.2.3
 * 16-09-04:
 *   c "tools" in package ausgelagert
 * 16-10-08: release als v0.2.5
 *   c Neue Funktion von "findfile()" eingebaut und Suchpfad auf "<loadpath>" festgelegt
 *#

<install>
	<info>
		-author="Erik Hänel"
		-version="0.2.5"
		-flags=ENABLE_FULL_LOGGING,DISABLE_SCREEN_OUTPUT
		-type=TYPE_PLUGIN
		-name="Fresnelanalyse"
		-plugindesc="Fresnelanalyse-Plugin zur Analyse des Brewsterwinkels. Weitere Informationen unter \"help fresnel\""
		-pluginmain=$plugins~fresnel~main(<EXPRESSION>,<PARAMSTRING>)
		-plugincommand="fresnel"
		-requireversion="1.0.9"
		-requirepackages="tools"
	<endinfo>
	
	procedure $plugins~fresnel~main(expression = "", paramstring = "") :: explicit
		str sFilename = to_string(expression), sTemp = "", sViewer = "", sTablename = "", col1 = "scale", col2 = "chi^2"
		var degrees = 1, intensities = 2, xmin = 0, xmax = 0, iterations = 0, line_0 = 1, line_1 = inf
		namespace this
		
		## Eingabe prüfen
		if (!strlen(sFilename))
			throw "Kein Datei- oder Tabellenname für die Fresnelanalyse angegeben.\nSiehe auch \"help fresnel\" für weitere Informationen."
		endif
		if (!is_data(sFilename) && !findfile(sFilename, "<loadpath>")) ## Wenn's die Datei nicht gibt, brauchen wir hier auch gar nicht mehr weitermachen
			throw "Die Datei oder die Tabelle \"" + sFilename + "\" konnte nicht gefunden werden bzw. existiert nicht.\nBitte überprüfe, ob die zu analysierenden Daten auch vorhanden sind."
		endif
		sViewer = get -viewer -asstr; ## wenig sinnvolle Rückgabe, wenn kein Viewer deklariert wurde. Intern bereits behoben.
		
		## Fitfunktion definieren, falls nötig
		ifndefined fit_fresnel(x,scale,inverse_refr_index,offset) := scale*(tan(x-arcsin(inverse_refr_index*sin(x)))^2)/(tan(x+arcsin(inverse_refr_index*sin(x)))^2)+offset -set comment="Fitfunktion für den Fresnel- bzw. Brewsterwinkel-Versuch"
		
		## Datei laden falls nötig
		new plgn_fresnel() -free ## Neuen und ggf. leeren Speicher erzeugen
		if (!is_data(sFilename))
			load sFilename -ignore
			sFilename = data(#,#)
			if (!findparam("cols", paramstring, "="))
				## Dateiinhalt anzeigen
				show data()
				"Die Gradwerte und Intensitäten werden benötigt. Gebe bitte die Spaltennummern an." -print
				## Spalten abfragen
				degrees = readline -msg="Gradwerte: ";
				intensities = readline -msg="Intensitäten: "; ## Kein Codepage-Parser, intern bereits behoben
			else
				## Anderenfalls die Parameter direkt lesen (funktioniert so weit)
				{degrees,intensities} = to_value(getopt(paramstring, findparam("cols", paramstring, "=")+4)) ## {}= ist buggy, Leerzeichen ist essentiell, intern bereits behoben
			endif
			## Spaltenplausibilitätsprüfung
			if (degrees <= 0 || intensities <= 0 || degrees == intensities)
				throw "Die Spaltennummern wurden nicht sinnvoll angegeben. (Entweder sie sind kleiner-gleich 0 oder identisch.)"
			endif
			## Kopieren der entsprechenden Spalten
			plgn_fresnel(:,1) = data(:,degrees);
			plgn_fresnel(:,2) = data(:,intensities);
		else
			## Falls der Datensatz bereits geladen wurde, werden hier die nötigen Informationen aus dem string gelesen
			## Bisherige Lösung
			##sTablename = substr(sFilename,1, strfnd("(", sFilename)-1);
			##{line_0,line_1,degrees,intensities} = getindices(sFilename, 1); ## Könnte man eigentlich auch abstrahieren in eine globale Prozedur
			
			## Neue Lösung durch globale Prozedur und der Möglichkeit, gemischte Datentypen zurückgeben zu können
			{sTablename,line_0,line_1,degrees,intensities} = $tools~extractTableParams(sFilename, 1)
			plgn_fresnel(:,1) = to_value(sTablename + "(" + #line_0 + ":" + #line_1 + "," + #degrees + ")")
			plgn_fresnel(:,2) = to_value(sTablename + "(" + #line_0 + ":" + #line_1 + "," + #intensities + ")")
		endif
		
		## Chimap einbinden
		if (findparam("chimap", paramstring))
			## Werden Spaltennamen vorgegeben?
			if (findparam("chimap", paramstring, "="))
				{col1,col2} = split(getopt(paramstring, findparam("chimap", paramstring, "=")+6),","); ## Was passiert, wenn die einzelnen Spaltennamen mit Anführungszeichen umfasst werden?
				if (!strlen(col2))
					col2 = "chi^2"
				endif
				## Mit vorgegebenen Spaltennamen
				$chimap(sViewer, col1, col2)
			else
				## Standard-Spaltennamen
				$chimap(sViewer)
			endif
			## Speicher aufräumen
			remove plgn_fresnel()
			## Plotparameter auf Standardwerte zurücksetzen
			plot -set reset
			## Nach Abschluss der chi^2-Map zurück
			return void
		endif
		
		## reserved for future use (Lesen des Intervalls als String?)
		xmin = min(plgn_fresnel(:,1)), xmax = max(plgn_fresnel(:,1));
		
		## Parameter schätzen: offset ist Minimum, scale ist zehnmal die y-Range und inverse_refr_index wird einfach als 0.7 vorgegeben
		offset = min(plgn_fresnel(:,2)), scale = 10*(max(plgn_fresnel(:,2))-offset), inverse_refr_index = 0.7;
		
		plot plgn_fresnel(:,1:2) "Messwerte" -set reset xlabel="Winkel [rad]" ylabel="Intensität [V]" box xscale=180/_pi silent opng="fresnel"
		$showPlot("fresnel.png", sViewer) ## Plot anzeigen oder Folder öffnen, falls kein Viewer existiert
		
		## Fitparameter abfragen
		"Sieh dir den generierten Plot der Datenpunkte an und wähle sinnvolle Startwerte. Der Skalierungsfaktor \"scale\" sollte eher groß gewählt werden, für den inversen Brechungsindex \"inverse_refr_index\" bieten sich Zahlen um 0.7 (etwa 1/1.4) an und der Offset entspricht etwa dem Minimum der Messwerte." -print
		"Es wurden bereits sinnvolle Startwerte geschätzt." -print
		while (true) ## Endlosschleife: wird mittels "return" verlassen (eigentlich ja "break", aber das funktioniert gerade nicht, intern bereits behoben)
			## Diese Abfrage ist pure Faulheit. Könnte man auch mit "readline" lösen, außer dass "readline" (noch) keine Defaultwerte unterstützt
			scale = ??[scale];
			inverse_refr_index = ??[inverse_refr_index];
			offset = ??[offset];
			iterations++
			
			## Parameter prüfen und ggf. positiv wählen
			!scale ? scale = abs(10*(max(plgn_fresnel(:,2))-offset)) : scale = abs(scale)
			!inverse_refr_index ? inverse_refr_index = 0.7 : inverse_refr_index = abs(inverse_refr_index)
			
			## Fitten
			fit plgn_fresnel(:,1:2) -with=fit_fresnel(radian(x), scale, inverse_refr_index, offset) [xmin:xmax] tol=1e-9
			
			## Ergebnis anzeigen
			plot plgn_fresnel(:,1:2) "Messwerte", fit_fresnel(radian(x), scale, inverse_refr_index, offset) "n = "+#round(1/inverse_refr_index,4) -set xscale=180/_pi xlabel="Winkel [rad]" ylabel="Intensität [V]" opng="fresnel" silent
			$showPlot("fresnel.png", sViewer) ## Warum will NumeRe das hier als Zeichenketten interpretieren...? Kann ja kaum an der Codierung der Procedure-Files liegen
			
			## readline unterstützt keine Defaults, daher muss hier eine Eingabe getätigt werden => intended behaviour
			sTemp = readline -asstr -msg="Diesen Fit mit neuen Parametern wiederholen? (j/n) "
			if (char(sTemp,1) == "n") ## Aus der Schleife springen
				##break ## funktioniert hier nicht, intern bereits behoben
				plot -set reset
				hline
				if (strlen(sTablename))
					to_uppercase("Vollständige Fitergebnisse der Fresnelanalyse von " + sTablename + "()") -print
				else
					to_uppercase("Vollständige Fitergebnisse der Fresnelanalyse von " + sFilename) -print
				endif
				hline
				"scale                = " + valtostr(scale," ", 13) + " [V]" -print
				"inverse_refr_index   = " + valtostr(inverse_refr_index," ",13) -print
				"refr_index (n)       = " + valtostr(1/inverse_refr_index," ", 13) -print
				"offset               = " + valtostr(offset," ",13) + " [V]" -print
				"chi^2                = " + valtostr(chi^2, " ",13) -print
				"Iterationen:           " + valtostr(iterations, " ", 13) -print
				hline
				remove plgn_fresnel()
				return void
			else
				## Neue Aufforderung schreiben
				"Gebe nun neue Startwerte an. Die angepassten Parameter werden als Defaultwerte verwendet." -print
			endif
		endwhile -mask
		
		## Wird erst nötig, wenn "break" wieder verwendet werden kann
		hline
		if (strlen(sTablename))
			to_uppercase("Fitergebnisse der Fresnelanalyse von " + sTablename + "()") -print
		else
			to_uppercase("Fitergebnisse der Fresnelanalyse von " + sFilename) -print
		endif
		hline
		"scale                = " + valtostr(scale," ", 13) + " [V]" -print
		"inverse_refr_index   = " + valtostr(inverse_refr_index," ",13) -print
		"refr_index           = " + valtostr(1/inverse_refr_index," ", 13) -print
		"offset               = " + valtostr(offset," ",13) + " [V]" -print
		"chi^2                = " + valtostr(chi^2, " ",13) -print
		"Iterationen:           " + valtostr(iterations, " ", 13) -print
		hline

		plot -set reset
		remove plgn_fresnel()
		return void
	endprocedure
	
	## Prozedur für eine chi^2-Map
	procedure $plugins~fresnel~chimap(viewer = "", col1 = "scale", col2 = "inverse_refr_index") :: explicit private
		var c1_0 = 0, c1_1 = 300, c2_0 = 0.5, c2_1 = 1
		## grid() auf jeden Fall erzeugen, falls nicht vorhanden (um den Inhalt von grid() zu bewahren, kann hier nicht "free" verwendet werden)
		new plgn_fresnel_chimap(), grid()
		delete plgn_fresnel_chimap() -ignore
		
		## Sicher gehen, dass zumindest der erste Parameter existiert
		if (to_string(col1) != "scale" && to_string(col1) != "inverse_refr_index" && to_string(col1) != "offset")
			throw to_string(col1) + " ist kein vorhandener Parameter in der Anpassung."
		endif
		
		if (to_string(col1) != "scale" || to_string(col2) != "inverse_refr_index")
			## Datenbereiche einlesen
			"Gib für die chi^2-Map bitte die Intervalle der fest zu variierenden Parameter ein:" -print
			c1_0 = readline -msg="Untere Grenze "+to_string(col1)
			c1_1 = readline -msg="Obere Grenze "+to_string(col1)
			## Nur, wenn die zweite Spalte nicht "chi^2" lauten soll
			if (to_string(col2) != "chi^2")
				c2_0 = readline -msg="Untere Grenze "+to_string(col2)
				c2_1 = readline -msg="Obere Grenze "+to_string(col2)
			endif
		endif
		
		## grid() mit plgn_fresnel_chimap() vertauschen
		swap -plgn_fresnel_chimap=grid ## das hier sollte das Maul halten. Intern bereits behoben.
		
		## Datensatz für chi^2-Map in grid() erzeugen
		datagrid 0 -set [c1_0:c1_1,c2_0:c2_1] ## target=plgn_fresnel_chimap() ? Erspart wohl etwas Rechenaufwand
		
		## wieder zurücktauschen
		swap -plgn_fresnel_chimap=grid
		
		## Spaltenüberschriften schreiben (wichtig, da dies entscheided, welche Parameter variiert werden sollen)
		plgn_fresnel_chimap(#,:) = to_string(col1), to_string(col2);
		"chi^2-Map wird berechnet. Einen Moment..." -print
		
		## chi^2-Map berechnen
		fit plgn_fresnel() -with=fit_fresnel(radian(x), scale, inverse_refr_index, offset) chimap=plgn_fresnel_chimap()
		"Berechnung abgeschlossen. Map wird generiert..." -print
		## Wenn nur 1D-Chimap, dann ist ein dens-Plot nicht sinnvoll
		if (plgn_fresnel_chimap(#,2) != "scale" && plgn_fresnel_chimap(#,2) != "inverse_refr_index" && plgn_fresnel_chimap(#,2) != "offset")
			plot plgn_fresnel_chimap() -set xlabel=plgn_fresnel_chimap(#,1) ylabel="\chi^2" box ylog silent opng="fresnel_chimap" reset title="\chi^2"
		else
			dens plgn_fresnel_chimap() -set xlabel=plgn_fresnel_chimap(#,1) ylabel=plgn_fresnel_chimap(#,2) box pcont fcont zlog clog silent opng="fresnel_chimap" reset title="\chi^2"
		endif
		$this~showPlot("fresnel_chimap.png", viewer)
		remove plgn_fresnel_chimap()
		"Generierung der chi^2-Map erfolgreich abgeschlossen." -print
		return void
	endprocedure
	
	## Diese Prozedur zeigt den ausgegebenen Plot an bzw. öffnet den entsprechenden Folder. Sollte eigentlich ein "thisfile" sein, ist aber buggy. Intern bereits korrigiert.
	procedure $plugins~fresnel~showPlot(filename = "", viewer = "") :: explicit private
		if (!strlen(filename))
			throw "Kein Dateiname zu einem Plot angegeben"
		endif
		if (!strlen(viewer))
			"Der Plot \"" + filename + "\" wurde erzeugt." -print
			open <plotpath>
		else
			view filename
		endif
		return void
	endprocedure
		
	<helpindex>
		<article id="plgn_fresnel">
			<title string="Fresnelanalyse" idxkey="fresnel" />
			<keywords>	
				<keyword>fresn</keyword>
				<keyword>brewst</keyword>
			</keywords>
		</article>
	</helpindex>
	
	<helpfile>
		<article id="plgn_fresnel">
			<title string="Fresnelanalyse" />
			Mit dem Fresnel-Plugin kann die Fitanalyse der Brewsterwinkel-Messung schnell und kompakt durchgeführt werden. Dazu ist es lediglich notwendig, dem Kommando <code>fresnel</code> den Dateinamen des Datensatzes zu übergeben:
			<codeblock>
				fresnel DATEINAME
			</codeblock>
			Das Plugin wird automatisch nach den entsprechenden Spalten fragen, in denen sich die Gradwerte der Messung bzw. die zugehörigen Intensitäten befinden. Falls diese jedoch im Voraus bekannt sind, können sie auch direkt angegeben werden:
			<codeblock>
				fresnel DATEINAME -set cols=GRAD,INTENS
			</codeblock>
			Zusätzlich ist es auch möglich, bereits geladene Datenreihen zu verwenden:
			<codeblock>
				fresnel DATEN(i1:i2,j1:j2)
			</codeblock>
			Sollte der ausgeführte Fit nicht mit den vorgegebenen Parameterwerten konvergieren, besteht direkt die Möglichkeit, den Fit mit neuen Werten zu wiederholen.
			Wenn die Option <code>chimap</code> bzw. <code>chimap=param1,param2</code> übergeben wird, so wird NumeRe eine chi^2-Map der Parameter <code>scale</code> und <code>inverse_refr_index</code> bzw. der vorgegebenen Parameter <code>param1,param2</code> berechnen. Eine chi^2-Map benötigt selbstverständlich deutlich länger als eine gewöhnliche Anpassung.
			<example desc="Fresnelanalyse eines Datenfiles mit vorgegebenen Spaltennummern:">
				fresnel Versuch.txt -set cols=2,3
			</example>
		</article>
	</helpfile>
<endinstall>

#* Ende des Scripts
 * NumeRe: Framework für Numerische Rechnungen | Freie numerische Software unter der GNU GPL v3
 * https://sites.google.com/site/numereframework/
 *#
