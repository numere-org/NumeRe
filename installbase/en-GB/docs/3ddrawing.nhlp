<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="3ddrawing">
	<title string="3D drawings and annotations" />
	You may create three dimensional drawings with annotations inside of NumeRe. The needed command is <code>draw3d</code>; it's mostly similar to its two dimensional pendant <code>draw</code>.
	The following functions may be used in an arbitrary order and combination inside of the drawing mode, as long as they are separated through commas. The description of the abbreviations can be found at "help draw" with the exception that all coordinate sets of <code>PNT</code> or <cod>DIR</code> are represented through 4 numbers <expr>(x,y,z)</expr> instead of two <expr>(x,y)</expr>.
	<list>
		<item node="point(PNT,STL)">Draws a point at the position PNT using the style STL. The shape of the point an its color may be modified using STL.</item>
		<item node="trace(PNT,PNT,STL)<br>tracev(PNT,DIR,STL)">Draws a straight line from PNT to PNT or PNT to PNT+DIR, respectively. If only one point is passed, then the second will be located at the origin. Color, shape and line endings may be modified using STL.</item>
		<item node="curve(PNT,DIR,PNT,DIR,STL)">Draws a "bezier" line from PNT to PNT. The direction vectors DIR determine the corresponding curvature of the curve. Please note that the coordinate system at the second point will be rotated by 180 degrees (additional signs are probably needed for the second direction vector). Color, shape and line endings may be modified using STL.</item>
		<item node="arc(PNT[,DIR],PNT,ANG,STL)<br>arcv(PNT[,DIR],DIR,ANG,STL)">Draws an arc with the angle ANG around the point PNT starting from point PNT or PNT+DIR, respectively. The optional direction DIR defines the normal vector, the default is the z axis. The orientation of the arc is counter-clockwise. The style of the arc may be modified with STL.</item>
		<item node="triangle(PNT,PNT[,PNT],STL)<br>trianglev(PNT,DIR[,DIR],STL)">Draws a triangle. You may pass either two or three edges. If you pass two edges, NumeRe will draw an equal-sided triangle, if you pass all three, then it will be a custom one. The edges are numbered going from lower left in counter-clockwise order. The filling of the triangle may be modified with STL.</item>
		<item node="face(PNT,PNT[,PNT,PNT],STL)<br>facev(PNT,DIR[,DIR,DIR],STL)">Draws a quadrangle. You may pass from two to four edges. If you pass two, NumeRe will draw an square, passing three edges will result in a parallelogram and all four edges will draw a custom quadrangle. The edges are numbered going from lower left in counter-clockwise order. In the case of <code>facev()</code> the first two vectors are the lower and the left border and the last is the diagonal opposite one. The filling of the quadrangle may be modified using STL.</item>
		<item node="polygon(PNT,PNT,N,STL)<br>polygonv(PNT,DIR,N,STL)">Draws a regular N-edged polygon around the point PNT going from point PNT, or PNT+DIR, respectively. The filling of the polygon may be modified using STL.</item>
		<item node="circle(PNT,RAD,STL)">Draws a circle around the point PNT with the radius RAD. The filling and the style of the circle may be modified using STL. <code>polygon()</code> with N >= 30 generates similar results and allows "tilting" of the circle.</item>
		<item node="ellipse(PNT,PNT,RAD,STL)<br>ellipsev(PNT,DIR,RAD,STL)">Generates an ellipse with the focus points PNT or PNT+DIR, respectively, and the ellipse radius RAD. The filling and the style of the ellipse may be modified using STL.</item>
		<item node="sphere(PNT,RAD,STL)">Draws a sphere with the radius RAD at the coordinates PNT. The color may be modified using STL. The plot option <code>light</code> makes the 3d effect visible.</item>
		<item node="drop(PNT,DIR[,SFT,ASP],STL)">Draws a three dimensional drop at the point PNT, which is tilted in the direction DIR. The optional parameters SFT and ASP may be used, to modify the shape of the drop. The color may be modified with STL and the plot option <code>light</code> makes the 3D effect visible.</item>
		<item node="cone(PNT,PNT,RAD[,RAD],STL)<br>conev(PNT,DIR,RAD[,RAD],STL)">Draws a cone shell with the radius RAD going from PNT to PNT or PNT+DIR, respectively. Using the second radius RAD will truncate the cone. Top and bottom faces will be displayed by passing <code>@</code> to STL. Passing <code>4</code>, <code>6</code> or <code>8</code> to STL will draw a 4, 6 or 8 sided (truncated) pyramid instead of the cone.</item>
		<item node="cuboid(PNT,DIR[,DIR,DIR],STL)">This function allows the display of a parallelepiped: displays a cube with the lower left edge at PNT, which marks the origin of the body-owned coordinate system. The direction DIR defines the x direction of the body. The y direction will be chosen orthogonal, leaving the z coordinate as it was. The z direction will be calculated out of the other two. If a second direction was passed, then this defines the y direction of the body and the z direction will be calculated. You'll obtain a real parallelepiped, if you define all three directions.</item>
		<item node="text(PNT[,PNT],TXT,STL)">Prints the text TXT at the position PNT. The justification and the color may be modified, in which justification and shape have to be separated with <code>:</code> from the color information. The justification is represented using <code>LRC</code> (Left-Right-Centered) and the shape with <code>rib</code> (roman-italic-bold). The second coordinate pair may be used, if the text shall not printed horizontally.</item>
	</list>
	The colors, which may be used in the style strings, are the same to those found at "help colors". The line endings of <code>trace()</code>, <code>curce()</code> and <code>arc()</code>, the line variants of all line-based plots and the shape of the points for <code>point()</code> are described in the list at "help linestyles".
	The additional style character <code>#</code> reduces the filled objects (such as <code>circle()</code>, <code>face()</code> and <code>ellipse()</code>) to their borders or visualizes them, respectively. Beside of <code>face()</code> and <code>triangle()</code> all filled objects may be modified with <code>@</code>, which results in displaying both, the face and the borders. The line thickness may be modified as well, using the numbers 0-9, which have to be passed to the corresponding style string.
	In combination with the compose mode of plots, the drawing mode may be used to add additional drawings to other plots or to add additional annotations.
	<example desc="Drawing of a simple red rotary:">
		draw3d cone(-2,2,4,0,0,0,1.5,"r"), cone(-2,2,4,-3,3,6,4,4,"r@"), cone(-3,3,6,-5,5,10,0.5,0.2,"r@") -set light
	</example>
	<em>See also:</em> "help plot", "help draw", "help colors", "help linestyles" and "help compose"
</article>