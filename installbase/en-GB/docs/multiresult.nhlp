<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="multiresult">
	<title string="Parallel and multi expression evaluations" />
	NumeRe may calculate <em>multiple values at once</em>, if their originating expressions are entered separated with commas. This may be enough in many cases, but it may be quite challenging, to enter a nearly identical expression multiple times correctly, if the expressions are only differ at single distinct locations.
	An improvement gives the so-called <em>NumeRe vector syntax</em>, or <em>column syntax</em>, how it is called more precisely. All expression parts, which are identical for all expressions ("scalars") have to be entered normally, whereas the differing elements have to be entered in braces:<codeblock>EXPRESSION {ELEMENT_1, ELEMENT_2, ...} EXPRESSION ...</codeblock>
	There is nearly no limitation in the type of elements. This may be numbers as well as complete expressions, but neither new braces nor data objects.
	If multiple of such braces are used in an expression, but the number of their elements are not matching, then the "shorter" braces will be extended to match the "longest" brace. In most cases the value 0.0 will be used, only if there is a <code>/</code> directly on the left of the corresponding brace, then it will be replaced by a 1.0. If the value 1.0 is instead needed in every case, then the "shorter" brace have to be surrounded by additional parentheses:<code>({ELEMENT_1, ELEMENT_2, ...})</code>. The parentheses of a surrounding function will be enough.
	The results of such a multi expression evaluation may be written directly to a cache:<codeblock>CACHE(I1:I2,J1:J2) = EXPRESSION {ELEMENT_1, ELEMENT_2, ...} ...</codeblock>
	Temporary columns may be created as well with this syntax, and a set of values may be directly assigned to its variables:<codeblock>{ELEMENT_1, ELEMENT_2, ...} = EXPRESSION {...}</codeblock>
	<example desc="Multiple calculation of the values of <code>cos(n*PI) + n</code>, where <code>n = {1, 2, 3, 4, 5}</code>:">
		cos({1,2,3,4,5}*_pi) + {1,2,3,4,5}
		ans = {     0,     3,     2,     5,     4}
	</example>
	<em>See also:</em> "help cache" and "help data"
</article>