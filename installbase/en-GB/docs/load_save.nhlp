<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="load_save">
	<title string="Loading and saving" />
	Data may be loaded to NumeRe or saved out of NumeRe into a file. The two commands <code>load</code> and <code>save</code> exist to grant this possibility:<codeblock>load FILE</codeblock>or<codeblock>save DATA(I1:I2,J1:J2) -file=FILE</codeblock>respectively. During loading NumeRe expects a textual file with the extension "*.dat" as default. This file extension may be modified to one of "*.dat", "*.txt", "*.ndat", "*.labx", "*.jdx", "*.dx", "*.jcm", "*.ibw", "*.ods", "*.xls", "*.xlsx" and "*.csv", if you explicitely append the extension to the file name. During saving of data, NumeRe will prefer its own "NumeRe data file" format (*.ndat), which is faster in loading and saving and preserves the precision.
	FILE names the name of the file, which shall be loaded or to which the data shall be written. As long as this file is stored in the default loading or saving path, respectively, the corresponding file path is not needed. In this case, NumeRe will implicit search in the corresponding directory for the named file. If the file path shall contain whitespaces, then it has to be surrounded by quotation marks.
	You may use placeholders for the default paths or wildcards (<code>*</code> and <code>?</code>), if you like to. See "help explorer" for further details about these placeholders.
	NumeRe supports loading of multiple files simultaneously. You may use one of the following methods in this case:
	<list>
		<item node="-all">Appending of this parameter and using a filename, which contains <em>at least one wildcard</em>, will result in loading all files matching to this filename</item>
		<item node="append">With this command you may append single files successively to already present data in memory: <code>append FILE</code> This command supports the parameter <code>-all</code> as well</item>
		<item node="tocache">This parameter creates a cache with the corresponding filename and copies the contents of the data file directly to this cache. This parameter supports the additional parameter <code>-all</code> and creates multiple caches in this case</item>
	</list>
	If you don't pass a filename during saving, then NumeRe will choose a fitting filename and the corresponding storage location by itself.
	You may pass the parameter <code>-ignore</code> to the command <code>load</code> to suppress a probable confirmation and to automatically free the needed memory, if applicable. Additionally, you may pass the number of the line in the comments, in which the column headings are located, if you pass <code>-head=LINE</code>. You'll only need this in the rare case that NumeRe is not capable of identifying them by its own.
	To export a data set to a textual file, you may use the command <code>export</code> followed by the data set and the desired filename:<codeblock>export DATA(I1:I2,J1:J2) -file=FILE</codeblock>If you define the file extension "*.tex", then a table using the TeX syntax will be created instead of the usual output. Defining the extension "*.csv" will produce a comma separated values file and passing a filename with "*.xls" as extension will create a Excel (97-2003) sheet containing the exported data.
	<example desc="Saving of the cache in the file <code>cache.ndat</code> and exporting of the first two columns to a TeX file:">
		save cache() -file=cache		(.ndat will be appended automatically)
		The data set was successfully saved to "&SAVEPATH&/cache.ndat".
		export cache(:,1:2) -file=cache.tex
		A table with 2088 elements was successfully written to the file "&SAVEPATH&/cache.tex".
	</example>
	<em>See also:</em> "help data", "help cache" and "help explorer"
</article>