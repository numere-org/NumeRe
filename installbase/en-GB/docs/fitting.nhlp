<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="fitting">
	<title string="Fitting functions to data sets" />
	NumeRe has an advanced algorithm for fitting functions, which fits passed, one dimensional functions to data sets containing <expr>x-y</expr> or <expr>y</expr> data points by varying the parameters of the corresponding function. NumeRe expects a function of the form <expr>y = FUNC(x,PARAMS)</expr>. In addition, NumeRe may fit two dimensional functions to datapoints of the form <expr>z(x,y)</expr>. In this case NumeRe expects a function with the form <expr>z = FUNC(x,y,PARAMS)</expr>. If the variable <expr>y</expr> is found in <expr>FUNC()</expr>, the algorithm will automatically switch to two dimensional fitting. 
	The fit algorithm in its simplest form will be started, if the command <code>fit</code> is passed. This command also needs the corresponding data set out of either <code>data()</code> or a cache. In the one dimensional case, NumeRe needs one or two columns, in the two dimensional case, NumeRe expects a whole range of columns in the shape of a data grid. In addition, the corresponding function has to be passed through the parameter <code>with=FUNC(x,PARAMS)</code> or <code>with=FUNC(x,y,PARAMS)</code>, respectively. You may pass a list of the function parameters, which shall be varied, and their initial values by using the parameter <code>params=[PARAMS=INITIALVALUES]</code>. If you specify a list of parameters, only these will be varied and all others will be constants, otherwise every variable, except of <expr>x</expr> and <expr>y</expr> will be varied starting from their current value.<codeblock>fit DATA(:,J1:J2) -with=FUNC(x,PARAMS) params=[PARAMS=INIT.]</codeblock>
	<em>Note:</em> If NumeRe does not succeed with the passed starting values, then all herein occuring <expr>0.0</expr> will be replaced with <expr>1.0</expr> and the algorithm will start once again.
	The values of the parameters, which resulted from the fit procedure, are directly stored in the parameters, allowing one to directly use them in the following calculations. The used function will be additionally stored to <code>Fit()</code> or <code>Fitw()</code>, respectively. The last calculated value for the weighted sum of the residuals (<expr>chi^2</expr>) will be stored to the variable <code>chi</code> in the form<exprblock>chi = sqrt(chi^2)</exprblock>
	If the <expr>y</expr> or <expr>x-y</expr> values (or the <expr>z</expr> values during 2D fits) are containing some deviations ("errors"), then these may be concerned using the command <code>fitw</code>. This mode weights the data points according to their deviations. The syntax is quite similar, however NumeRe expects three columns for pure <expr>y</expr> deviations and four columns for <expr>x-y</expr> deviations (either single or as group of columns):<codeblock>fitw DATA(:,J1:J2:J3:J4) -with=FUNC(x,PARAMS) params=[PARAMS=INIT.]</codeblock>As most Leuvenberg-Marquardt algorithms NumeRe may only concern pure <expr>y</expr> deviations. Therefore passed <expr>x-y</expr> deviations are averaged to single deviations internally. 
	The calculated deviations of the fitted parameters may be stored to new variables, if one passes the option <code>saverr</code>. These will be called <code>PARAM_error</code> according to their corresponding parameter (e.g. <code>amplitude_error</code> if the corresponding parameter is called <code>amplitude</code>).
	<em>Note:</em> If the calculated deviations shall be compared to the results of other programs, then please note that the calculated deviations obtained from <code>fit</code> are estimated asymptotically, whereas the deviations from <code>fitw</code> are calculated as standard deviations. The difference between those two is a multiplication with the variance of the residuals (reduced <expr>chi^2</expr>). The percentage values in parentheses represent the percentual part of the deviations with respect to the fitted parameter values.
	Probably it is an advantage, if not the range of lines of the data object is restricted for the fit algorithm but the interval of the corresponding <expr>x</expr> axis (or the <expr>y</expr> axis, respectively). This may be achieved by passing the additional option <code>x=XMIN:XMAX</code> (or <code>y=YMIN:YMAX</code>, respectively, or together through <code>[XMIN:XMAX,YMIN:YMAX]</code>) to the algorithm, where XMIN and XMAX (or YMIN and YMAX, respectively) are the lower and upper boundaries of the corresponding fit interval.
	The results of the fit procedure are protocoled in the file <code>&lt;savepath&gt;/numerefit.log</code>, which makes the results available for a later analysis. This file is limited to a total number of 100 000 lines. If this number is reached, then the file will be truncated to 20 000 lines.
	Additionally, the quality of the fit result will be analysed and NumeRe will propose some improvements. These proposals depend on the variance of the residuals, where is analysed, how well the results matches to the expected result obtained from a normal distribution. Also, the total value of the percentual deviations of the fitted parameteres is considered for this analysis. But note that the automatical analysis may only support a visual comparison with the actual data points, but not replace it totally.
	The parameters and options are gathered in the following list:
	<list>
		<item node="-with=FUNC(x,[y,]PAR)">Defines the function FUNC(), which shall be fitted to the data</item>
		<item node="-params=[PAR=INI]">Declares the parameter PAR, which shall be fitted, and their initial values INI</item>
		<item node="-restrict=[RESTRICT]">Declares restrictions RESTRICT for the parameter PAR. These have to be passed as one or more logical expressions for the parameters. Further details can be found at "help restrict"</item>
		<item node="-saverr">Saves the calculated deviations to new variables</item>
		<item node="-mask">Suppresses the display of the fit results and the truncating of the log file. However, the results of the fit procedures will be saved to the log file</item>
		<item node="-export=[FILENAME]">This enables the export of the returned table into a TeX file. The filename may be specified via FILENAME, otherwise the export is directed to <code>&lt;savepath&gt;/fit.tex</code>. This export is not influenced by <code>mask</code></item>
		<item node="-x=XMIN:XMAX">Restricts the <expr>x</expr> interval to [XMIN,XMAX]</item>
		<item node="-y=YMIN:YMAX">Restricts the <expr>y</expr> interval for the 2D fit algorithm to [YMIN,YMAX]</item>
		<item node="-tol=TOLERANCE">Determines the (relative and absolute) tolerance, which defines the border, from where the current parameter set will be interpreted as converging. The default value is 1e-4</item>
		<item node="-iter=ITERATIONS">Defines the maximal number of iterations, after them the fit algorithm will be canceled. The default value is 500</item>
		<item node="-chimap=DATAGRID()">Creates a <expr>chi^2</expr> convergence data set. The passed datagrid must have the correct dimensions and the corresponding parameter names as column headings. Further details can be found at "help chimap"</item>
	</list>
	<example desc="Fitting a sine function to the data in the cache (with <expr>y</expr> deviations:">
		fitw cache(:,1:3) -with=amp*sin(f*x+phi)+off params=[amp=1,f=1,phi=0,off=0]
	</example>
</article>

<article id="fitting_chimap">
	<title string="chi^2 convergence data sets" />
	A function, which supports model examinations quite well, is the so-called "<expr>chi^2</expr> convergence data set" or "<expr>chi^2</expr> map". This data sets protocoles the <expr>chi^2</expr> values, which were obtained, if one or two parameters were predefined varied and the remaining ones were fitted to the original data set. Depending on the form of one or more obtained minima, you may evaluate the convergence of the actual model for this data set. To create this data set, you've to pass the option <code>chimap=DATAGRID()</code>, where the predefined variation of the parameters must be passed by the <code>DATAGRID()</code>: 
	<list>
		<item node="Column header">The header of the first column(s) have to match to the parameter names, which shall be varied. If only the first column matches, then only this parameter will be varied and a 1D data set will be created. If both matches, NumeRe will create a 2D data set going on from column 3, which is a data grid. Please note that the columns may not be called "x" or "y".</item>
		<item node="Variation values">The variation values must be located in the first columns, which are matching to the parameter names. Depending on the length of these columns the creation of the <expr>chi^2</expr> map may take <em>a lot of</em> time.</item>
	</list>
	<em>Note:</em> The fitted parameters will be resetted at each point as well as at the end of the calculation to their starting value. 
	<em>Important:</em> Out of <expr>n</expr> parameters only <expr>n-1</expr> parameters may be varied. Therefore this data set cannot be obtained by a single parameter model. For a two parameter model only a 1D <expr>chi^2</expr> map can be determined as well.
</article>

<article id="fitting_restrictions">
	<title string="Fit parameter restrictions" />
	If there are some restrictions for the fit parameters in their possible values, they may be passed in the form <code>restrict=[PARAM_RESTRICTS]</code>. <code>PARAM_RESTRICTS</code> has to contain one or more logical expressions for the parameters, e.g. <code>restrict=[a&lt;1,b!=2.5]</code>. The order of the logical expressions doesn't play any role and expressions may contain multiple parameters as well. But please note that in this case the convergence of the algorithm may depend even stronger on the starting values. For some examples for parameter restrictions see below:
	<list>
		<item node="A">Parameter A may not be equal to 0</item>
		<item node="A &gt;= 0">Parameter A may not be negative</item>
		<item node="A &gt; 0.5 && A &lt; 1.5">Parameter A is approximately 1.0</item>
		<item node="A &gt; rint(A)-0.25 && A &lt; rint(A)+0.25">Parameter A shall be an integral number</item>
	</list>
</article>