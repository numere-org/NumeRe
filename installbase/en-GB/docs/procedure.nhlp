<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="procedure">
	<title string="NumeRe Procedures" />
	Beside of the possibility to execute scripts, NumeRe contains the powerful ability to execute <em>complex</em> procedures. These procedures can be compared to functions in the usual programming with C/C++ or other programming languages. This means that complex tasks may be solved with procedures, because they may call themselves recursively.
	Procedure definitions are started with the keyword <code>procedure</code> and closed with <code>endprocedure</code>. Appended to the keyword <code>procedure</code> the name of the procedure initialized by a <code>$</code> and their argument list must follow. Directly after the argument list and <code>::</code> it's possible to append additional <em>optional flags</em>, which influence the procedure as a whole. Between <code>procedure</code> and <code>endprocedure</code> the body of the procedure follows, in which the actual expressions and commands are evaluated:
	<codeblock>
		procedure $PROCEDURNAME(VARLIST) :: FLAGS    ## Procedure head
		\tPROCEDURE BODY                           ## Expressions and commands
		endprocedure                                 ## Prozedure tail
	</codeblock>
	Procedures must be available as single "NumeRe procedure files" (*.nprc) in the default procedure path, where the name of the file must match the name of the procedure. If you want to be sure, then you may enter the procedure(s) to a NumeRe script in a <code>&lt;install&gt;...&lt;endinstall&gt;</code> block and run the script by <code>install SCRIPT</code>. NumeRe will create the corresponding procedure files by itself in the matching location. (NumeRe may load procedures out of other files, if the relative or absolute file path in <em>single</em> quotation marks is entered: <code>$'PATH_TO_THE_PROCEDURE'(VARLIST)</code>. Because it's likely that such long file name have errors, it's not recommended to use this feature.)
	It's possible to gather multiple procedures in a single file, as long as one of them carries the name of the file. The other procedures may be called from the naming procedure with the special syntax <code>$thisfile~...</code> (see below).
	The following flags are available:
	<list>
		<item node="private">A procedure with this flag may <em>only</em> be called by a procedure in the same namespace. Such a declaration makes sense, if the procedure has some dependencies, which have to be fulfilled by other procedures first.  (Procedures, which are called by <code>$thisfile~...</code> (see below) and are not the naming procedure of the file, are implicit <code>private</code>)</item>
		<item node="explicit">This flag prevents the procedure from calling plugins. This may be an advantage if the procedure has to be executed very fast, or to prevent the procedure from creating an endless loop, if it is part of an overwriting plugin.</item>
		<item node="inline">A procedure, which was flagged as <code>inline</code>, can be executed faster inside of a loop. But note that an "inline procedure" mustn't contain loops, procedures or plugins.</item>
	</list>
	Procedures may be called with a <code>$</code> followed by the procedure's name and the variable list. This may be done directly from the NumeRe console, as well as out of loop or a script. NumeRe will interrupt the current programm flow and execute the desired procedure. If the procedure contains a return value (signalized with the command <code>return</code>), then it may be assigned to a variable or entered in a calculation.
	NumeRe contains namespaces similar as C++, which may be used to avoid naming conflicts with other procedures or to structurize whole projects. The syntax, to call a procedure out of an explicit namespace, is <codeblock>$NAMESPACE~PROCEDURE(ARGUMENTS)</codeblock>These namespaces are represented by subdirectories in the default procedure path, which are named according the current namespace (and not through <code>procedure $NAMESPACE~PROCEDURE(ARGUMENTS) ...</code>). The namespace <code>main</code> is the global namespace (equal to the default procedure path); the namespace <code>this</code> is the namespace of the current procedure. An exception is the namespace <code>thisfile</code>: this namespace is restricted to the current file. All procedures in this file,  which don't carry the name of the file, automatically are <code>private</code>.
	Using the command <code>namespace NSP</code> the namespace NSP may be activated for the following procedures to avoid entering the namespace for each procedure. However, procedures of other namespaces may be called by explicitely naming the namespace. This command will only be evaluated inside of a procedure.
	If a procedure shall be created within a script or directly through the console, and if it shall be located in another namespace than <code>main</code>, this namespace has to be named in the procedure's head through <codeblock>procedure $NAMESPACE~PROCEDURE(ARGUMENTS)\n\t...\nendprocedure</codeblock>(This is only used for identifying the namespace and won't be written to the procedure file.)
	You may load part of scripts to procedures by the usage of the syntax <code>@SCRIPT</code>. This is equal to the similar expression inside of a script. The parameters <code>@SCRIPT: globals</code> and <code>@SCRIPT: defines</code> are available as well.
	In addition to the usual path placeholders <code>&lt;loadpath&gt;</code>, <code>&lt;scriptpath&gt;</code>, etc., the special placeholder <code>&lt;this&gt;</code> may be used, which points to the directory of the current executed procedure.
	<em>Important:</em> Beside of the usual commands and expressions, the body of a procedure may contain special commands with procedure specific meaning. They are listed at "help proccmd".
	The evaluation may be aborted using the <code>ESC</code> key, if it takes too much time.
	Procedures may be used to extend the functionality of NumeRe with the use of plugins (which may be called using a command). The declaration of such a plugin may only be done inside of an <code>&lt;install&gt; ... &lt;endinstall&gt;</code> block in a NumeRe script. (See "help plugin" for further information)
	<example desc="A procedure, which automates a data analysis (will be called in NumeRe with <code>$analyse_data(DATAFILENAME)</code>):" type="verbatim">
        |   procedure $analyse_data(datafile)
        |       if (!data())
        |           load to_string(datafile)
        |       else
        |           return false
        |       endif
        |       stats data() -export="stats_" + to_string(datafile)
        |       hist data() -export="hist_" + to_string(datafile) bins=32
        |       return true;
        |   endprocedure	
	</example>
	<em>See also:</em> "help script", "help install", "help plugin", "help if", "help for" and "help while"
</article>

<article id="procedure_commands">
	<title string="Procedure commands" />
	The body of a procedure may contain the usual commands and expressions, which may be entered directly to the console. In addition there are some special commands with procedure specific meaning:
	<list>
		<item node="var VARIABLES">This declares internal (local) variables, which may only be used inside of the current procedure (they are even unique, if the procedure recursively calls itself). You may simultaneously pass initial values through <code>var VAR1 = VALUE1, VAR2 = VALUE2, ...</code>. This command may only be used once in each procedure. All further occurences will be ignored.</item>
		<item node="str STRINGVARS">This declares interal (local) string variables, which may only be used inside of the current procedure. You may simultaneously define initial values through <code>str SVAR1 = STRING1, SVAR2 = STRING2, ...</code>. This command may only be used once in each procedure. All further occurences will be ignored.</item>
		<item node="return VALUE">If NumeRe mets this command during the evaluation, then it will leave the current procedure (No matter, if this is the last command or not. Commands, which appear in the following lines, won't be executed.). <code>return</code> may be used multiple times in a procedure, e.g. if the return value depends one condition. It is even not necessary to use this command; procedures return the value <code>true</code> as default, if no <code>return</code> or a <code>return</code> without value was found. In addition to numerical values, the VALUE may be a string or a mixture of both types. A special value is <code>void</code>. This defines that the procedure explicitely doesn't have a return value.</item>
		<item node="readline">This gives you the possibility to read an formatted input (in contrast to <code>??</code>). Parameters are <code>-asstr</code> (transforms the input a string), <code>-msg=MESSAGE</code> (writes MESSAGE at the beginning of the line, e.g. as an explanation) and <code>-dflt=DEFAULTVALUE</code> (defines a default value). The input may be written directly to a variable through <code>VAR = readline</code> or to a string through <code>STRING = readline -asstr</code>.</item>
		<item node="namespace NSP">Switches at this point to the namespace NSP. If NSP is <code>main</code> or nothing, then NumeRe will switch to the global namespace; if NSP is <code>this</code>, then NumeRe switches to the namespace of the current procedure. <code>thisfile</code> restricts the namespace to the current file.</item>
		<item node="throw">If an event happens, which is not covered by the current procedure (e.g. a senseless value), and the further evaluation cannot be done without errors, then this command may be used to jump out of all procedures. Its effect is similar to an exception in C++ (and will evaluated internally just like this). You may append your own error message as a string through <code>throw "ERRORMESSAGE"</code>.</item>
	</list>
</article>