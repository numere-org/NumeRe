<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="while_loop">
	<title string="WHILE loops" />
	A WHILE loop executes repeatedly the same <expr>N</expr> expressions similar to FOR loops. The central difference is that a WHILE loop doesn't need a loop index and therefore there's no predefined number of loop iterations. The abortion of a WHILE loops is either determined by the mandatory condition in the declaration or by an additional <code>break</code> in a part of the loop.
	The declaration of a WHILE loops needs a logical fulfillable condition, which has to passed inside of parentheses:<codeblock>while (CONDITION)\n\tEXPRESSIONS\nendwhile</codeblock>The CONDITION will be checked at the beginning of each loop repetition and the loop will be continued, if the CONDITION will be evaluated to TRUE, or it will be aborted, if the result is FALSE.
	A WHILE loop will be closed with the command <code>endwhile</code>. This command is needed for each opened WHILE loop. If the outermost loop was closed, all loops will be evaluated instantly. If the optional parameter <code>-sv</code> was passed during the closing of a loop (it's not relevant which loop), <em>all</em> steps of the execution will be displayed. If you pass the parameter <code>-mask</code> instead, then even the status message during the evaluation will be suppressed. The parameter <code>-lnumctrl</code> canceles all loops after maximal 1000 iterations. The actual number of iterations may be modified with <code>-lnumctrl=VALUE</code>.
	A WHILE loop may contain an arbitrary number of FOR loops, other WHILE loops and IF forks.
	The declaration of a loop may be canceled with the command <code>abort</code> without executing all already entered expressions. This is in contrast to the command <code>break</code>, which will evaluated at runtime.
	The two commands <code>break</code> and <code>continue</code> grant further control over a WHILE loop. These commands may be placed inside of an IF fork (which is part of the WHILE loop itself) and influence the evaluation from there:
	<list>
		<item node="break">Canceles the evaluation of the current WHILE loop at this point and jumps in the next surrounding FOR/WHILE loop/IF fork. If this was already the outermost loop, all loops will be canceled</item>
		<item node="continue">Canceles the evaluation of the current loop repetition at this point and continues with the next repetition</item>
	</list>
	The evaluation may be canceled with the <code>ESC</code> key, if it takes too much time.
	For simple corrections you may use the command <code>replaceline</code>. See <a href="nhlp://replaceline?frame=new">help replaceline</a> for further information.
	<example desc="A WHILE loop, which will be executed, until a file name to a loadable data set was entered:" type="verbatim">
		|&lt;- while (!data())
		|WHL&gt; data -load=??
		|WHL&gt; endwhile
	</example>
	<em>See also:</em> <a href="nhlp://vect?frame=self">help vect</a>, <a href="nhlp://colorscheme?frame=self">help colorscheme</a>, <a href="nhlp://multiresult?frame=self">help multiresult</a> and <a href="nhlp://plot?frame=self">help plot</a>
</article>