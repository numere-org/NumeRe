<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2016  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="while_loop">
	<title string="WHILE-Schleifen" />
	Ähnlich wie eine FOR-Schleife arbeitet auch eine WHILE-Schleife dieselben <expr>N</expr> Ausdrücke wiederholt ab. Der zentrale Unterschied ist jedoch, dass eine WHILE-Schleife keinen Zählindex benötigt und dementsprechend keine vorgegebene Anzahl an Durchläufen besitzt. Der Abbruch einer WHILE-Schleife wird entweder direkt durch die bei der Deklaration angegebene Bedingung oder durch ein zusätzliches <code>break</code> in einem Teil der Schleife bestimmt.
	Die Deklaration einer WHILE-Schleife benötigt eine logisch auswertbare Bedingung, die in Klammern angegeben werden muss:<codeblock>while (BEDINGUNG)\n\tAusdrücke\nendwhile</codeblock>Die BEDINGUNG wird zu Beginn eines jeden Schleifendurchlaufes überprüft und, falls die BEDINGUNG den logischen Wert WAHR hat, die Schleife fortgesetzt, oder, falls sie FALSCH ist, an dieser Stelle verlassen.
	Eine WHILE-Schleife wird durch das Kommando <code>endwhile</code> geschlossen. Dieses Kommando ist für jede geöffnete WHILE-Schleife nötig. Wird dabei die äußerste Schleife geschlossen, so wird die Schleife automatisch ausgewertet. Wird der optionale Parameter <code>-sv</code> beim Schließen einer (egal, welcher) Schleife übergeben, so werden <em>alle</em> Schritte der Auswertung angezeigt. Wird stattdessen der optionale Parameter <code>-mask</code> angegeben, so wird auch die Benachrichtigung, dass NumeRe am Auswerten ist, unterdrückt. Der Parameter <code>-lnumctrl</code> bricht alle Schleifen nach maximal 1000 Iterationen ab. Die Zahl der Iterationen kann mittels <code>-lnumctrl=WERT</code> beeinflusst werden.
	Eine WHILE-Schleife kann eine beliebige Zahl an FOR-Schleifen, anderen WHILE-Schleifen oder IF-Verzweigungen enthalten.
	Die Deklaration kann mit dem Kommando <code>abort</code> abgebrochen werden, ohne dass die bisher eingegebenen Befehle ausgeführt werden. Dies steht im Gegensatz zu dem Kommando <code>break</code>, dass erst während der Laufzeit ausgewertet wird.
    Erweiterte Kontrolle über die WHILE-Schleife geben die beiden Kommandos <code>break</code> und <code>continue</code>, die auch innerhalb einer IF-Bedingung (die selbst Teil der WHILE-Schleife ist) stehen können und von dort Einfluss auf die Auswertung nehmen:
	<list>
		<item node="break">Bricht die Auswertung der aktuellen WHILE-Schleife an dieser Stelle ab und springt in die (evtl. vorhandene) äußere FOR-/WHILE-Schleife/IF-Bedingung. Falls die aktuelle Schleife bereits die äußerste ist, wird die gesamte Auswertung abgebrochen</item>
		<item node="continue">Bricht die Auswertung des aktuellen Schleifendurchlaufes an dieser Stelle ab und fährt sofort mit dem nächsten Durchlauf fort</item>
	</list>
	Die Auswertung kann auch mit der <code>ESC</code>-Taste abgebrochen werden, falls sie zu viel Zeit in Anspruch nimmt.
	Für einfache Korrekturen steht der Befehl <code>replaceline</code> zur Verfügung. Siehe hierzu: "help replaceline"
	<example desc="Eine WHILE-Schleife, die so lange ausgeführt wird, bis der Dateiname zu einem ladbaren Datensatz eingegeben wurde:" type="verbatim">
		|&lt;- while (!data())
		|WHL&gt; data -load=??
		|WHL&gt; endwhile
	</example>
	<em>Siehe auch:</em> "help if", "help for", "help data", "help cache" und "list -logic"
</article>