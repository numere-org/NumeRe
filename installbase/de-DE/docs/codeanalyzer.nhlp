<!--
	NumeRe: Framework fuer Numerische Rechnungen
	Copyright (C) 2017  Erik Haenel et al.

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
-->

<article id="codeanalyzer">
	<title string="Code-Analyzer" />
	Der Editor kann eine statische Analyse des eingegeben Codes durchführen. Der Code-Analyzer wird mit dem entsprechenden Menüpunkt oder mit <code>[Strg-Shift-A]</code> aktiviert und zeigt Meldungen in drei Stufen an:
	<list>
		<item node="Hinweis (grau)">Dies sind Meldungen, die zur Verbesserung des Programmierstils dienen sollen. Sie haben keinen relevanten Einfluss auf den Ablauf des Codes.</item>
		<item node="Warnung (gelb)">Warnungen sind Punkte im Code, die vom Benutzer ggf. nicht beabsichtigt sind und daher genauer untersucht werden sollten, z.B. eine Endlosschleife oder nicht benutzte lokale Variablen.</item>
		<item node="Fehler (rot)">Wenn eine solche Meldung erscheint, dann sollte die Ursache beseitigt werden, da es sonst höchstwahrscheinlich zum Abbruch während der Ausführung kommen wird. Beispielsweise ein Kommando, das ohne Ausdruck verwendet wurde, oder eine Prozedur, die nicht gefunden werden kann.</item>
	</list>
	Außerdem werden Codemetriken wie die zyklomatische Komplexität angewandt. 
	<list>
		<item node="Zyklomatische Komplexität">Diese Metrik misst die Zahl der unabhängigen Pfade, die der Kontrollfluss in einem Modul nehmen kann, ergo die Zahl der <code>if</code>, <code>elseif</code>, <code>for</code> und <code>while</code> Anweisungen + 1. Es wird ein Hinweis für eine Komplexität höher 15 und eine Warnung für eine Komplexität höher als 20 angezeigt</item>
		<item node="Codezeilen">Dies ist die Zahl der Zeilen, die nicht leer sind und die nicht nur aus Kommentaren bestehen, also die eigentlichen Zeilen mit Anweisungen und Ausdrücken</item>
		<item node="Kommentardichte">Die Kommentardichte ergibt sich aus der Zahl der Zeilen, die Kommentare enthalten (mehrere Kommentare in einer Zeile werden berücksichtigt), durch die Zahl der Codezeilen (s.o.). Gut kommentierter Code hat eine Kommentardichte von 60 - 150 %</item>
	</list>
	Die Ergebnisse der Metriken werden mit vorgegebenen Grenzen verglichen und ggf. wird eine Warnung oder ein Hinweis angezeigt:
	<table>
		<tr>
			<td><em>Metrik</em></td><td><em>Untere Schranke</em></td><td><em>Obere Schranke</em></td><td><em>Lösungsvorschlag</em></td>
		</tr>
		<tr>
			<td>Zykl. Komplexität</td><td>---</td><td>15/20</td><td>Das Modul durch Einführen von Prozeduren unterteilen, da es womöglich schwer verständlich und schwierig zu testen ist.</td>
		</tr>
		<tr>
			<td>Codezeilen</td><td>---</td><td>100</td><td>Das Modul durch Einführen von Prozeduren unterteilen, da es durch die vielen Zeilen schwer zu überblicken ist.</td>
		</tr>
		<tr>
			<td>Kommentardichte</td><td>60 %</td><td>150 %</td><td>Das Modul weiter kommentieren bzw. auf auskommentierten Code prüfen, der eine häufige Ursache für eine hohe Kommentardichte ist.</td>
		</tr>
	</table>
</article>